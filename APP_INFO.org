##This is a simple info page for the White Whale group. Contains many
##different commands we use for git, digital ocean, etc. 
#+TITLE: APP_INFO
#+AUTHOR: whitewhale dev crew
#+BEGIN_SRC
#+END_SRC

* Linux Performance Command
http://www.cyberciti.biz/faq/linux-check-memory-usage/
http://www.tecmint.com/command-line-tools-to-monitor-linux-performance/
#+BEGIN_SRC
$ top 
$ cat /proc/meminfo
$ free -h
$ free -t -h
------------------------------------------------------------
             total       used       free     shared    buffers     cached
Mem:          994M       915M        79M        20M        23M       444M
-/+ buffers/cache:       447M       547M
Swap:           0B         0B         0B
Total:        994M       915M        79M

$ free --help
----------------------------------------------------------
Usage:
 free [options]

Options:
 -b, --bytes         show output in bytes
 -k, --kilo          show output in kilobytes
 -m, --mega          show output in megabytes
 -g, --giga          show output in gigabytes
     --tera          show output in terabytes
 -h, --human         show human readable output
     --si            use powers of 1000 not 1024
 -l, --lohi          show detailed low and high memory statistics
 -o, --old           use old format (no -/+buffers/cache line)
 -t, --total         show total for RAM + swap
 -s N, --seconds N   repeat printing every N seconds
 -c N, --count N     repeat printing N times

      --help    display this help text
 -V, --version  output version information and exit

$ vmstat
-------------------------------------------------------------
procs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa
 0  0      0  81224  24072 455308    0    0   192    79   52  100  1  1 98  0
#+END_SRC
* Git Links
Links Below for working with Git.  Branching and merging need to be solid. Also, need to be solid about
flow of code from Dev --->Test ---> Prod , to keep clean code only in Production. 

[add ssh key] (https://help.github.com/articles/changing-a-remote-s-url/)
[git branching](http://www.git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging)
[markdown guide for wiki] (https://guides.github.com/features/mastering-markdown/)
[emoji:whale:](http://www.emoji-cheat-sheet.com/)

* Git Commands:

** Configuring fork :
https://help.github.com/articles/configuring-a-remote-for-a-fork/ 

** Add upstream 
** add upstream 
$ git remote add upstream https://github.com/WhiteWhaleXYZ/WhiteWhale.git
** $ git remote -v

# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)
# origin    https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)
# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)
# upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push) 

** PUSHING AND PULLING 
#+BEGIN_SRC:

$ git pull
$ git push 

#+END_SRC:

** REVERTING UNWANTED CHANGES 
#+BEGIN_SRC:

$ git pull
$ git push 

#+END_SRC:

Below info on file reverting from : 
http://www.norbauer.com/rails-consulting/notes/git-revert-reset-a-single-file.html

This one is hard to find out there so here it is. If you have an uncommitted change (its only in your working copy) that you wish to revert (in SVN terms) to the copy in your latest commit, do the following:

git checkout filename

This will checkout the file from HEAD, overwriting your change. This command is also used to checkout branches, and you could happen to have a file with the same name as a branch. All is not lost, you will simply need to type:

git checkout -- filename

You can also do this with files from other branches, and such. man git-checkout has the details.

The rest of the Internet will tell you to use git reset --hard, but this resets all uncommitted changes youâ€™ve made in your working copy. Type this with care.


#+BEGIN_SRC:


#+END_SRC:

** Testing Difference of Branches
#+BEGIN_SRC

$ git diff --stat --color Dev..Prod
#+END_SRC
* Bundle commands 
#+BEGIN_SRC
// Dev 
$ bundle exec rake db:migrate RAILS_ENV=development 
$ bundle install --path vendor/bundle

// Test can be done from the dev branch 
$ RAILS_ENV=test bundle install --path vendor/bundle
$ rake sunspot:solr:start
$ rake sunspot:reindex
// Use bundel to run rake 
$ bundle exec rake sunspot:solr:start
$ bundle exec rake sunspot:reindex

// Production 
$ bundle exec rake assets:precompile
//user this instead of deployment for current setup
$ RAILS_ENV=production bundle install
!!NOT NOW $ bundle install --deployment
$ RAILS_ENV=production bundle exec rake db:migrate
$ rake sunspot:solr:start
$ rake sunspot:reindex
// Use bundel to run rake 
$ bundle exec rake sunspot:solr:start
$ bundle exec rake sunspot:reindex

// necessary to build the pg gem with bundle command 
$ bundle config build.pg --with-pg-config=/usr/pgsql-9.4/bin/pg_config
#+END_SRC
* App Server Commands :
#+BEGIN_SRC:
// Production Kill the puma pid 
$ kill -s SIGTERM `cat tmp/puma/pid`
$ bundle exec puma -C config/puma.rb
#+END_SRC:

* Solr Config
** Secure the solr admin console
<ipaddress>:8983/solr
#+BEGIN_SRC
$ sudo firewall-cmd --remove-port=8983/tcp
#+END_SRC

* Ruby version
2.2.0
* Rails Version
4.2.0
* System dependencies
* Configuration
Gemfile INFO : 
#+BEGIN_SRC: 

#+END_SRC:
* Database 
Postgres 9.4 : gem pg 1.18
Config: /usr/pgsql-9.4/bin/pg_config
#+BEGIN_SRC
$ sudo systemctl start postgresql-9.4.service // start postgres
$ sudo systemctl enable postgresql-9.4.service  //auto start on reboot 
-----------
output from enable 
ln -s '/usr/lib/systemd/system/postgresql-9.4.service' '/etc/systemd/system/multi-user.target.wants/postgresql-9.4.service'

#+END_SRC

* Database initialization
* Database migrations and console searching 
    #+BEGIN_SRC
    $ bundle exec rails generate migration AddNameToPods name:string
    $ bundle exec rails generate migration RemoveNameFromPods name:string

    $ bundle exec rails console
      >Pods.count
       1
      >Pods.first
       Whale.find_by name: "stuff"


    #+END_SRC

* How to run the test suite
#+BEGIN_SRC: 
$ bundle exec rake test 
#+END_SRC:
* Deployment instructions
** install process 
1. git clone :
2. run nginx 
3. run solr
4. run puma

** software dependencies
1. nginx
2. postgres
3. imagemagick
4. rvm / ruby
5. independent gems: 
   - bundle


* Web-Server Startup
#+BEGIN_SRC 
// after editing /etc/nginx/nginx.conf 
$ sudo systemctl start nginx
// or 
$ sudo systemctl restart nginx
#+END_SRC

* Running Tests
$ RAILS_ENV=test rake sunspot:solr:run



